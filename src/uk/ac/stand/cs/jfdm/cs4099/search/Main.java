/*
 * Copyright (C) 2007-2008 
 * 			Jan de Muijnck-Hughes <jfdm@st-andrews.ac.uk>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * See LICENSE.txt for details
 *
 */
/**\mainpage Overview
 * 
 * \section intro Introduction
 * These pages contain information relating to the software produced as part of the CS4099 Major Software Project.
 * 
 * \section oview Overview
 * This Java project contains three programs used to construct and validate permutation codes, below you will find 
 * more information regarding the programs and their usage.
 * 
 * \section oview1 SearchSystem
 * The SearchSystem is used to search for permutation codes using lists generated by the Permutation Generator a 
 * GAP program. The SearchSystem can search through lists of permutations that have been constructed with or with 
 * out automorphism groups. The output of the system is a OpenMath File.
 * 
 * 	\subsection flag Flags
 *		\subsubsection reqflags Required Flags
 *			\li \b f Denotes the input file that will contain the permutations.
 *			\li \b d Denotes the hamming distance to be used in the search process.
 * 		\subsubsection optflsgs Optional Flags
 *			\li \b s Denotes the name of the file used to store the results of the search.
 *
 *	\subsection eg Example
 *		\verbatim java ... -finputfile.txt -d5 -sresults.xml \endverbatim
 * 
 * \section oview3 ResultsTransformer
 * The ResultsTransformer transforms the results file from the SearchSystem into the same format as the expected 
 * input file for the SearchSystem. This is to allow those results to be searched through again using the SearchSystem
 * in an attempt to validate the results.
 * 
 * \subsection flag Flags
 *		\li \b i Denotes the input file..
 *		\li \b s Denotes the name of the file that is to be saved to..
 * \subsection eg Example
 *     \verbatim java ... -iresultsfile.xml -sinputversion_resultsfile \endverbatim
 *     
 * \section oview2 ValidateSearch
 * The ValidateSearch program takes a results file created by the SearchSystem and contains automorphisms and expands the permutation code to its 
 * constituent permutations and searchs through those for the same code that the results file represents and compares 
 * the expected number of codewords to be found against the number of codewords found as a result of the search. 
 * 
 *\subsection flag Flags
 *		\li \b f Denotes the input file..
 * \subsection eg Example
 *     \verbatim java ... -fresultsfile.xml \endverbatim
 */
/**\package uk.ac.stand.cs.jfdm.cs4099.search
 * Contains the main launch point of the program and the SearchClass used 
 * to carry out the permutation code search.
 */
package uk.ac.stand.cs.jfdm.cs4099.search;

import java.io.FileNotFoundException;
import java.io.IOException;

import org.apache.log4j.Logger;

import uk.ac.stand.cs.jfdm.cs4099.grouptheory.IPermutationCode;
import uk.ac.stand.cs.jfdm.cs4099.io.ResultsExporter;
import uk.ac.stand.cs.jfdm.cs4099.utils.CmdLineArgs;
import uk.ac.stand.cs.jfdm.cs4099.utils.Log;

/**
 * Main launch point for the SearchSystem that has been designed to search for
 * permutation codes using lists of permutations generated by a GAP Program..
 * 
 * <h2>Program Usage</h2>
 * <ul>
 * <li>Required
 * <ul>
 * <li>\verbatim-f<input file name>\endverbatim</li>
 * <li>\verbatim-d<hamming distance >\endverbatim</li>
 * </ul>
 * </li>
 * <li>Optional
 * <ul>
 * <li>\verbatim-s<results file name>\endverbatim</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * <h2> Example</h2>
 * \verbatim java ... -finputfile.txt -d5 -sresults.xml \endverbatim
 * 
 * @author jfdm
 * @version 1
 */
public class Main {

	/**
	 * Used to log various aspects of the objects operation.
	 */
	public static Logger logger = Log.getLogger(Main.class.getName());
	/**
	 * Denotes the flag that specifies Usage information.
	 */
	public static final String FLAG_USAGE = "-h";
	/**
	 * Denotes the flag that specifies the input file.
	 */
	public static final String FLAG_FILE = "-f";
	/**
	 * Denotes the distance flag.
	 */
	public static final String FLAG_DISTANCE = "-d";
	/**
	 * Denotes the flag for specifying the name of the results file.
	 */
	public static final String FLAG_RESULTS_FILE = "-s";

	/**
	 * Contains the user input checks and is the launch point of the project.
	 * 
	 * @param args
	 *            The command line arguments.
	 */
	public static void main(String[] args) {
		CmdLineArgs arg = new CmdLineArgs();

		// if no args throw hissy fit
		if (args.length > 0) {

			arg.processArgs(args);

			try {
				SearchClass sc = null;

				// get command line args
				String usage = arg.getArg(FLAG_USAGE);
				String str_distance = arg.getArg(FLAG_DISTANCE);
				String filename = arg.getArg(FLAG_FILE);

				// if ask for help give it
				if (usage != null) {
					usage();
					System.exit(0);
				}

				// if no args present display usage
				if (str_distance != null && filename != null) {

					// get distance and set up search Class
					int hamming_distance = Integer.parseInt(str_distance);
					sc = new SearchClass(filename, hamming_distance);

					// do search
					IPermutationCode results = sc.performSearch();

					// get user specified filename for the results
					String results_filename_user = arg
							.getArg(FLAG_RESULTS_FILE);
					String results_filename = "";

					// if no name specified use default
					if (results_filename_user != null) {
						results_filename = results_filename_user;
					} else {
						results_filename = filename.substring(0,
								filename.length()).concat("_").concat(
								ResultsExporter.DEFAULT_FILENAME);
					}

					// handle results.
					ResultsExporter export = new ResultsExporter(
							results_filename);
					export.addResultsInformation(sc.getNumberOfCodeWords(),
							hamming_distance, sc.getPermutationSize());

					// if auto group used export information
					if (sc.wasAutoGroupUsed()) {
						export.addAutoGroupInfo(sc.getAuto_group_descrip(), sc
								.getAuto_group_generators(), sc
								.getAutoGroupSize());
					}

					export.addIPermutationCode(results);

					export.save();
				} else {
					logger.error("Invalid Input");
					usage();
				}

			} catch (SearchException e) {
				logger.error("Error conducting search", e);
				usage();
			} catch (NumberFormatException e) {
				logger.error("Distance entered is not a number", e);
				usage();
			} catch (FileNotFoundException e) {
				logger.error("File entered doesn't exist", e);
				usage();
			} catch (IOException e) {
				logger.error("Error saving file");
			}
		} else {
			logger.error("Invalid Input");
			usage();
		}
	}

	/**
	 * Displays usage information.
	 */
	public static void usage() {
		logger.info("Usage Information:");
		logger.info("Required");
		logger.info("     " + FLAG_FILE + "<input filename>");
		logger.info("     " + FLAG_DISTANCE + "<hamming distance>\n");
		logger.info("Optional");
		logger.info("     " + FLAG_RESULTS_FILE + "<results filename>");
	}
}
