/*
 * Copyright (C) 2007-2008 
 * 			Jan de Muijnck-Hughes <jfdm@st-andrews.ac.uk>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * See LICENSE.txt for details
 *
 */
/**\package uk.ac.stand.cs.jfdm.cs4099.transform
 * 
 * Contains a program that will transform the output file generated by the <code>ResultsExporter</code>
 * class into the same format accepted by the <code>FileImporter</code> class.
 * 
 */
package uk.ac.stand.cs.jfdm.cs4099.transform;

import org.apache.log4j.Logger;

import uk.ac.stand.cs.jfdm.cs4099.utils.CmdLineArgs;
import uk.ac.stand.cs.jfdm.cs4099.utils.Log;

/**
 * Main launch point for the <code>ResultsTransformer</code> that transforms
 * an output file generated by the <code>ResultsExporter</code> class into the
 * same format accepted by the <code>FileImporter</code> class.
 * 
 * <h2>Program Usage</h2>
 * 
 * <ul>
 * <li>\verbatim-i<results file>\endverbatim</li>
 * <li>\verbatim-s<name of file to save to>\endverbatim</li>
 * </ul>
 * 
 * <h2>Example Usage</h2>
 * \verbatim java ... -iresultsfile.xml -snew_file.txt \endverbatim
 * 
 * @author jfdm
 * @version 1
 * 
 */
public class Main {
	/**
	 * Used to log various aspects of the objects operation.
	 */
	private static Logger logger = Log.getLogger(Main.class.getName());

	/**
	 * Denotes the flag used to specifiy the input file.
	 */
	public static final String FLAG_INPUT_FILE = "-i";

	/**
	 * Denotes the flag used to specifiy the name of the saved file.
	 */
	public static final String FLAG_SAVE_FILE = "-s";

	/**
	 * Contains the user input checks and is the launch point of the project.
	 * 
	 * @param args
	 *            The command line arguments.
	 * @throws Exception
	 *             If there is an error during the process.
	 */
	public static void main(String[] args) throws Exception {
		CmdLineArgs arg = new CmdLineArgs();

		// if no args throw hissy fit
		if (args.length > 0) {

			arg.processArgs(args);

			String input_file = arg.getArg(FLAG_INPUT_FILE);
			String output_file = arg.getArg(FLAG_SAVE_FILE);

			if (input_file != null && output_file != null) {
				ResultsTransformer rt = new ResultsTransformer(input_file, output_file);
				rt.save();
			} else {
				logger.error("Invalid Arguments");
				usage();
			}
		} else {
			logger.error("Not Enough Arguments");
			usage();
		}
	}

	/**
	 * Displays usage information.
	 */
	public static void usage() {
		logger.info("Usage Information:");
		logger.info("Required");
		logger.info("     " + FLAG_INPUT_FILE + "<input filename>");
		logger.info("     " + FLAG_SAVE_FILE + "<name of the file to save to");
	}

}
